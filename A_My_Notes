Operating System:
      The operating system is an interface between the user and the machine. 
      It also allows us to communicate with the computer without knowing how to speak the computer’s language.
      It manages computer hardware, software resources, and provides common services for computer programs.
      It manages the computer’s memory, processes, devices, files, and security aspects of the system.i.e. resource manager.
Types of Os:
      Batch OS:
            DE:
            Imagine you are the owner of a photography studio,
            and you have a Batch Operating System in place to process and print photos. 


            This type of operating system does not interact with the computer directly.
            Os --------> cpu.
            There is an operator which takes similar jobs having the same requirement and groups them into batches.
            Os----> batch---> cpu
            It is the responsibility of the operator to sort jobs with similar needs. 
            Jobs---->Os----->batch----->cpu

            Advantages:
                  It is very difficult to guess or know the time required for any job to complete, but processors of the batch systems know how long the job would be when it is in the queue.  
                  It is easy to manage large work repeatedly in batch systems.
            Dis:
                  Batch systems are hard to debug.
                  It is sometimes costly.

    Distributed OS:
            DE:
            Imagine you are part of a team working on a project, 
            and your team members are spread across different locations.To enhance collaboration,
            you decide to use a distributed operating system that allows 
            seamless sharing of computing resources and I/O files.

            It connects multiple computers via a single communication channel.
            (daily life example: people in villagers meet at a large tree).
            Individual systems that communicate via a single channel are regarded as a single entity and They're also known as loosely coupled systems.
      
      Multitasking OS:
            Multitasking Operating System is simply a multiprogramming Operating System with having facility of a Round-Robin Scheduling Algorithm.
            It can run multiple programs simultaneously.
            It comes with proper memory management.

            Dis adv:
            The system gets heated in case of heavy programs multiple times.

            Example:
            Search engine.
      Network OS:
            These systems run on a server and provide the capability to manage data,
                  users, groups, security, applications, and other networking functions. 
            
            A Network Operating System (NOS) is designed to manage and coordinate network resources, 
                  allowing multiple computers to communicate and share resources within a network.
            
            Example:
            File and Print Services:
            
            Users on different computers can share files seamlessly through NetOS.
            Print services allow users to send print jobs to network printers, eliminating the need for direct connections.

            Adv:
            Highly stable centralized servers.
            Security concerns are handled through servers.

            Disadv:
            Servers are costly.
            User has to depend on a central location for most operations

      Real-Time OS:
            The time interval required to process and respond to inputs is very small. 
            This time interval is called response time. 
            Real-time systems are used when there are time requirements that are very strict like missile systems,
            air traffic control systems, robots, etc. 

            Types:
            Hard -> time constraints very strict -> automatic parachute air bag.
            Soft -> streaming services for netflix and prime interms of buffering.

            Adv:
            More output from all the resources.

            Disadv:
            The algorithms are very complex and difficult for the designer to write on.
            Example:
            weapon systems, robots, air traffic control systems.

      Mobile OS:
            Mobile operating systems are specialized operating systems designed
            to run on mobile devices such as smartphones and tablets. 
            They provide a platform for running applications, 
            managing hardware resources, and facilitating communication between various components.
==============
Socket:
      A socket is one endpoint of a two-way communication link between two programs running on the network. 
      A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to.
  Detail Note:
        Normally, a server runs on a specific computer and has a socket that is bound to a specific port number. 
        The server just waits, listening to the socket for a client to make a connection request.

      On the client-side:
        The client knows the hostname of the machine on which the server is running and the port number on which the server is listening. 
        To make a connection request, the client tries to rendezvous with the server on the server's machine and port. The client also needs to identify itself to the server so it binds to a local port number that it will use during this connection. This is usually assigned by the system.

      On the server-side:
          If everything goes well, the server accepts the connection.
          Upon acceptance, the server gets a new socket bound to the same local port and also has its remote endpoint set to the address and port of the client.
          It needs a new socket so that it can continue to listen to the original socket for connection requests while tending to the needs of the connected client.

      result:
            On the client side, if the connection is accepted, a socket is successfully 
            created and the client can use the socket to communicate with the server.


Monolithic Kernel (provides good performance but lots of lines of code):
      It is one of the types of kernel where all operating system services operate in kernel space. It has dependencies between system components. It has huge lines of code which is complex.
      Example : Unix, Linux, Open VMS, XTS-400 etc.
===================================================================================
Difference between process and program and thread? Different types of process. 

Process:
      Process is an instance of an executing program. For example, we write our computer programs in a text file and when we execute this program, it becomes a process which performs all the tasks mentioned in the program.

Program:
      Program is a set of instructions to perform a certain task. Eg: chrome.exe, notepad.exe

Thread:
      Thread is a path of execution within a process.
      A thread is also known as a lightweight process. 
      The idea is to achieve parallelism by dividing a process into multiple threads.
      For example,Word processor uses multiple threads: one thread to format the text, another thread to process inputs.
================================================================================
Virtual Memory:

A computer can address more memory than the amount physically installed on the system.
The main visible advantage of this scheme is that programs can be larger than physical memory. Virtual memory serves two purposes. First, it allows us to extend the use of physical memory by using a disk. Second, it allows us to have memory protection, 
because each virtual address is translated to a physical address.
=================================================================================
Thrashing:

Thrashing is a condition or a situation when the system is spending a major portion of its time in servicing the page faults, 
but the actual processing done is very negligible. 
Relatable content:
The primary cause of thrashing is when the system is overwhelmed with too many processes or tasks
that require more memory than is physically available. 
As a result, the operating system constantly swaps data in and out of the main memory to the storage device,
leading to a significant decrease in system performance.
========================================================================
RAID:
Redundant Array of Independent Disks. 
RAID is a technology that combines multiple hard drives into a single logical unit 
to improve data storage performance, reliability, or a combination of both.
The idea behind RAID is to use several disks together in ways that provide benefits such as 
increased data protection, better performance, or a balance between the two.

There are different RAID levels, each offering different advantages. Here are some common RAID levels explained briefly:

RAID 0 (Striping): Data is split across multiple drives, improving performance because multiple disks can be read or written to simultaneously. However, there is no redundancy, so if one drive fails, all data is lost.

RAID 1 (Mirroring): Data is duplicated on two or more drives. This provides redundancy, meaning if one drive fails, the data is still available on the mirrored drive(s). However, it doesn't offer a performance improvement.

RAID 5 (Striping with Parity): Similar to RAID 0 in terms of performance, but it includes parity information, which allows for data recovery in case one drive fails. RAID 5 requires a minimum of three drives.

RAID 10 (Combination of RAID 1 and RAID 0): It combines mirroring (RAID 1) and striping (RAID 0). Data is both mirrored and striped for both performance and redundancy. RAID 10 requires a minimum of four drives.

RAID 6 (Striping with Dual Parity): Similar to RAID 5, but with two sets of parity information. This allows for the system to recover from the failure of up to two drives. RAID 6 requires a minimum of four drives
==========================================
Deadlock:
      A Deadlock is a situation where each of the computer processes waits for a resource 
      which is being assigned to some other process. In this situation, none of the processes gets
      executed since the resource it needs is held by some other process which is also waiting for
      some other resource to be released.

Key characteristics of deadlocks include:

Mutual Exclusion: 
      Processes contend for exclusive control over resources, meaning that once a process holds a resource, others are excluded from using it.

Hold and Wait: 
      Processes hold resources while waiting for others, creating a situation where resources are not released until new resources are obtained.

No Preemption: 
      Resources cannot be forcibly taken away from a process; they must be released voluntarily.

Circular Wait: 
      There is a circular chain of processes, each waiting for a resource held by the next process in the chain.

      
