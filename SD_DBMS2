Difference between vertical and horizontal scaling :

Scaling:
=======
Scaling alters the size of a system. In the scaling process,
we either compress or expand the system to meet the expected needs.
The scaling operation can be achieved by adding resources to meet the smaller expectation in the current system, 
or by adding a new system in the existing one, or both.

Vertical scaling and horizontal scaling are two approaches to increasing the capacity 
or performance of a system, and they involve different strategies for handling increased demand or load.

Vertical Scaling (Scaling Up):
============================
Definition: Vertical scaling involves adding more resources (such as CPU, RAM, or storage) to a single machine or node in a system.
==========
Vertical scaling keeps your existing infrastructure but adds computing power. 
Your existing pool of code does not need to change â€” you simply need to run the same code on machines
with better specs. By scaling up, you increase the capacity of a single machine and increase
its throughput. Vertical scaling allows data to live on a single node, and scaling spreads
the load through CPU and RAM resources for your machines.

Example: Upgrading a server by adding more CPU cores, increasing RAM, or using a more powerful processor.
========
Horizontal Scaling (Scaling Out):
================================
Definition: Horizontal scaling involves adding more machines or nodes to a distributed system.
==========
Horizontal scaling simply adds more instances of machines without first implementing 
improvements to existing specifications. By scaling out, you share the processing power
and load balancing across multiple machines.

Example: Adding more servers to a web application to distribute the incoming traffic and share the load.
=======

Choosing between Vertical and Horizontal Scaling:
========  ======= ======== === =================
Use Case: The choice often depends on the specific use case, workload, and the architecture of the application.
Limits of Vertical Scaling: If a system reaches the limits of vertical scaling (e.g., due to hardware constraints),
horizontal scaling becomes a natural choice.
Cloud Environments: Horizontal scaling is commonly used in cloud environments where adding or removing virtual machines is more flexible.

In many modern systems, a combination of both vertical and horizontal scaling is employed to achieve the desired performance,
scalability, and fault tolerance. This approach is often referred to as "scaling up" and "scaling out" simultaneously.

Daily life example for vertical scaling and horizontal scaling:
================================================================
Vertical:
Imagine you have a small car that you use for commuting.
As your family grows, you find that the car is becoming too small.
Instead of buying a second car (horizontal scaling), you decide to upgrade to a larger,
more powerful car. This vertical scaling allows your single vehicle to accommodate
the increased capacity and meet the growing needs of your family.

Horizontal:

Consider organizing a dinner party for a large group of friends.
Instead of cooking all the dishes yourself (vertical scaling),
you decide to adopt a horizontal scaling approach.
You invite your friends and ask each of them to bring a dish to share.
This way, the workload is distributed horizontally across multiple contributors,
making the overall dinner preparation more efficient and allowing for a greater variety of dishes.


=====================================
What is sharding ??? (To divide and distribute tasks or responsibilities to make them more manageable.)
=====================================
Sharding is a method of splitting and storing a single logical dataset in multiple databases.
By distributing the data among multiple machines, a cluster of database systems can store larger dataset and handle additional requests. 
Sharding is necessary if a dataset is too large to be stored in a single database. 
Sharding allows a database cluster to scale along with its data and traffic growth.



Keys in DBMS :
=============
A key is a field or a combination of fields that uniquely identifies a record in a table.

Super Key:
==========
  A super key is a set of one or more keys that can uniquely identify a record.
  It may contain more fields than necessary to form a minimal super key.

  Example: In a "Employees" table, a combination of "Employee_ID" and "Email" can form a super key.
  Daily Life Scenario:
  In a contact list, a combination of a person's phone number and email address can be considered a super key as it uniquely identifies each contact

Candidate Key:
==============
A candidate key is a unique key that can become a primary key.
It satisfies the uniqueness and irreducibility criteria.

Example: In a "Product" table, both "Product_ID" and "Barcode" might be candidate keys.
Daily Life Scenario:
Consider a store where products can be identified uniquely either by their product ID
or barcode. Both the product ID and barcode are candidate keys.

Primary Key:
============
A primary key is a unique identifier for a record in a table.
It cannot have NULL values.
Each table can have only one primary key.

Example: In a "Students" table, the "Student_ID" can be a primary key.
Daily Life Scenario:
Think of a library where each book has a unique ISBN (International Standard Book Number). The ISBN can be considered as a primary key for the books in the library.

Alternate Key:
=============
An alternate key is the secondary candidate key that contains all the property of a candidate key but is an alternate option.
It is capable of identifying a row uniquely.
However, such a key is not used as a primary key because,
as we have discussed in our previous section that out of all the generated 
candidate keys, only one key is selected as the primary key. 
Thus, the other remaining keys are known as Alternate Keys or Secondary Keys.

