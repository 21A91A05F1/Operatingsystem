DBMS(Data Base Management System):
A Database Management System (DBMS) is software that enables the creation, management, and interaction with databases, 
ensuring efficient and secure data storage, retrieval, and manipulation.

We are having file system then why we need dbms??
A DBMS is needed over a file system because it provides advanced features like reduced data redundancy, 
enhanced data integrity, security, efficient data retrieval, concurrent access control, and automated backup and recovery,
which are essential for managing complex and large-scale data efficiently.

Key Functions of a DBMS
Data Storage Management: Efficiently stores large amounts of data.
Data Retrieval: Provides tools to retrieve data quickly and efficiently.
Data Manipulation: Allows for data updates, deletions, and insertions.
Data Security: Ensures data security and privacy.
Backup and Recovery: Maintains data integrity by providing backup and recovery mechanisms.
Data Integrity: Enforces data integrity rules to ensure the accuracy and consistency of data.
Multi-user Access Control: Manages concurrent access to data by multiple users.

Advantages of a DBMS
Data Integrity and Accuracy: Ensures data is accurate and consistent through constraints and rules, preventing invalid data entry.
Data Security: Provides robust security features such as user authentication, encryption, and access control to protect sensitive data.
Data Independence: Abstracts data from application programs, allowing changes in the database structure without altering the application programs.
Efficient Data Access: Uses indexing, query optimization, and other techniques to quickly retrieve and manipulate data.
Reduced Data Redundancy: Minimizes data duplication by integrating data into a single database, reducing storage costs and improving data consistency.
Improved Data Sharing: Facilitates data sharing among multiple users and applications, enhancing collaboration and decision-making.
Backup and Recovery: Provides automated backup and recovery options to prevent data loss and ensure data availability.
Scalability: Supports large databases and can scale to accommodate growing amounts of data and increasing numbers of users.
Concurrency Control: Manages simultaneous data access by multiple users, ensuring data consistency and integrity.
Standardization of Data Management: Enforces standards and protocols for data management, improving data quality and compatibility across applications.


what is a database??
A database is an organized collection of data stored in a way that allows easy access, management, and updating. 
It's like a digital filing system where information is categorized and can be quickly retrieved when needed.

what is databasesystem??
A database system is a combination of software and hardware that allows you to store, manage, and retrieve data efficiently.
It includes a database (where the data is stored)and a Database Management System (DBMS)
(the software that helps you interact with the data).

What is RDBMS ? 
A Relational Database Management system (RDBMS) is a database management system that is based on the relational model. 
It has the following major components: Table, Record/Tuple/Row, Field, and Column/Attribute. 
Examples of the most popular RDBMS are MYSQL, Oracle, IBM DB2, and Microsoft SQL Server database.

What is the difference between rdbms and dbms??
The main differences between a DBMS and an RDBMS are:

Data Structure:

DBMS: Manages data as files, which can be hierarchical, network, or object-oriented.
RDBMS: Manages data in tabular form, organizing data into tables with rows and columns.
Relationships:

DBMS: Typically does not support relationships between data.
RDBMS: Uses primary and foreign keys to establish relationships between tables.
Normalization:

DBMS: Generally lacks support for data normalization, which can lead to redundancy.
RDBMS: Supports normalization, reducing redundancy and ensuring data integrity.
ACID Properties:

DBMS: May not fully support ACID (Atomicity, Consistency, Isolation, Durability) properties.
RDBMS: Fully supports ACID properties, ensuring reliable transactions and data consistency.
Query Language:

DBMS: Often uses non-standard query languages.
RDBMS: Uses SQL (Structured Query Language) as the standard for querying and managing data.

Properties::

Relational databases have the following properties:
Values are atomic.
All of the values in a column have the same data type.
Each row is unique.
The sequence of columns is insignificant.
The sequence of rows is insignificant.
Each column has a unique name.
Integrity constraints maintain data consistency across multiple tables.
=================================================
Types of datbase languages:
Database languages are specialized languages that facilitate various interactions with databases. These languages are classified based on their functionalities and are crucial for defining, manipulating, controlling, and managing data within a database. Here is a detailed explanation of the main types of database languages:

1. Data Definition Language (DDL)
Purpose: DDL is used to define and manage all structures of the database. It allows you to specify the schema of the database 
and make changes to it.

Key Commands:

CREATE: Used to create new database objects like tables, indexes, or views.

CREATE TABLE employees (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    position VARCHAR(50)
);
ALTER: Used to modify the structure of existing database objects.

ALTER TABLE employees ADD COLUMN salary DECIMAL(10, 2);
DROP: Used to delete database objects.

DROP TABLE employees;
TRUNCATE: Used to remove all records from a table without deleting the table itself.

TRUNCATE TABLE employees;
2. Data Manipulation Language (DML)
Purpose: DML is used to manipulate the data within the database objects. It allows for inserting, updating, deleting, and retrieving data.

Key Commands:

INSERT: Adds new records to a table.

INSERT INTO employees (id, name, position) VALUES (1, 'Alice', 'Manager');
UPDATE: Modifies existing records in a table.

UPDATE employees SET position = 'Senior Manager' WHERE id = 1;
DELETE: Removes records from a table.

DELETE FROM employees WHERE id = 1;
SELECT: Retrieves data from one or more tables.

SELECT * FROM employees WHERE position = 'Manager';
3. Data Control Language (DCL)
Purpose: DCL is used to control access to the data within the database. It provides commands to grant or revoke permissions to users.

Key Commands:

GRANT: Gives a user permission to perform specific actions on the database.

GRANT SELECT, INSERT ON employees TO user1;
REVOKE: Removes a user's permissions.

REVOKE SELECT ON employees FROM user1;
4. Transaction Control Language (TCL)
Purpose: TCL manages transactions within the database, ensuring that operations are completed successfully
and maintaining the integrity of the database.

Key Commands:

COMMIT: Saves all changes made during the current transaction.

COMMIT;
ROLLBACK: Undoes all changes made during the current transaction.

ROLLBACK;
SAVEPOINT: Sets a savepoint within a transaction to which you can later roll back.

SAVEPOINT savepoint1;
RELEASE SAVEPOINT: Removes a savepoint.

RELEASE SAVEPOINT savepoint1;
SET TRANSACTION: Sets the characteristics for the current transaction.

SET TRANSACTION READ ONLY;

Summary
DDL (Data Definition Language): Defines and alters the structure of database objects.
DML (Data Manipulation Language): Manages the data within database objects.
DCL (Data Control Language): Controls access and permissions to the database.
TCL (Transaction Control Language): Manages transactions to ensure data integrity and consistency.
Each of these database languages plays a crucial role in ensuring that databases are structured, managed, 
and accessed efficiently and securely.

=======================================================
Acid Properties:

The ACID properties are a set of principles that ensure reliable processing of database transactions. Each property plays
a crucial role in maintaining the integrity and consistency of a database. Hereâ€™s a detailed explanation of each property along with
example scenarios:

1. Atomicity
Definition: Ensures that a transaction is treated as a single, indivisible unit of work. Either all operations within the
transaction are completed successfully, or none of them are.

Example Scenario: Consider a banking application where a customer transfers money from Account A to Account B.

Operations in Transaction:

Deduct amount from Account A.
Add amount to Account B.
Atomicity Example:

If the system crashes after deducting the amount from Account A but before adding it to Account B, atomicity ensures that the entire
transaction is rolled back, so Account A's balance remains unchanged.

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 'A';
UPDATE accounts SET balance = balance + 100 WHERE account_id = 'B';
COMMIT; -- Both updates occur, or neither does.
2. Consistency
Definition: Ensures that a transaction brings the database from one valid state to another, maintaining all predefined rules, such 
as integrity constraints.

Example Scenario: In the same banking application, suppose there is a rule that the total amount of money in the system must remain
constant.

Consistency Example:
Before the transaction, the total amount is $1000. After transferring $100 from Account A to Account B, the total amount should still
be $1000. If any constraints (like a negative balance) are violated during the transaction, the transaction is rolled back.

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 'A';
-- Assume a constraint: balance >= 0
UPDATE accounts SET balance = balance + 100 WHERE account_id = 'B';
COMMIT; -- Only commits if both accounts maintain valid balances.
3. Isolation
Definition: Ensures that transactions are executed in isolation from one another. Intermediate results of a transaction are invisible
to other transactions until the transaction is complete.

Example Scenario: Two customers are transferring money simultaneously. Customer 1 transfers $100 from Account A to Account B, 
and Customer 2 transfers $200 from Account C to Account D.

Isolation Example:
Without isolation, Customer 2 might see an intermediate state where only one part of Customer 1's transaction has been completed. Isolation ensures that each transaction is unaware of other transactions' intermediate states.

-- Transaction 1
BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 'A';
UPDATE accounts SET balance = balance + 100 WHERE account_id = 'B';
COMMIT;

-- Transaction 2
BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 200 WHERE account_id = 'C';
UPDATE accounts SET balance = balance + 200 WHERE account_id = 'D';
COMMIT;
4. Durability
Definition: Ensures that once a transaction is committed, the changes are permanent, even in the event of a system failure.

Example Scenario: After completing the transfer of $100 from Account A to Account B, a system crash occurs.

Durability Example:
After the system is restored, the committed transaction should still be reflected in the database. The transfer should be complete, showing $100 less in Account A and $100 more in Account B.

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 'A';
UPDATE accounts SET balance = balance + 100 WHERE account_id = 'B';
COMMIT; -- Ensures changes are permanent even if the system crashes immediately after.
Summary with Example
Consider a complete transaction scenario in a banking application involving the transfer of funds:

Transaction Steps:

Start the transaction.
Deduct $100 from Account A.
Add $100 to Account B.
Commit the transaction.
Atomicity: If any step fails, the transaction is rolled back, and neither account is updated.

Consistency: The total funds before and after the transaction remain the same, and no constraints (like minimum balance requirements) 
are violated.

Isolation: During the transaction, other transactions cannot see the intermediate state, ensuring no other operations interfere.

Durability: Once the transaction commits, the changes persist even if the system crashes immediately afterward.

Example Implementation

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 'A';
-- Assume a constraint: balance >= 0 (ensuring consistency)
UPDATE accounts SET balance = balance + 100 WHERE account_id = 'B';
COMMIT; -- Ensures atomicity, consistency, isolation, and durability.

By adhering to the ACID properties, database systems ensure reliable and consistent transactions, 
which are critical for applications requiring high data integrity and reliability.
==========================================================================================================
